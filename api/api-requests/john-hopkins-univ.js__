'use strict'; 

/**
 * GET request builder for the 
 * John Hopkins University covid-19 
 * REST API. 
 * @method UsOnly 
 */
module.exports = class JohnHopkinsRequest{

    static host = 'https://webhooks.mongodb-stitch.com';
    
    static routes = {
        usOnly : '/api/client/v2.0/app/covid-19-qppza/service/REST-API/incoming_webhook/us_only',
        global : '/api/client/v2.0/app/covid-19-qppza/service/REST-API/incoming_webhook/global',
        metadata : '/api/client/v2.0/app/covid-19-qppza/service/REST-API/incoming_webhook/metadata',
        countriesSummary :  '/api/client/v2.0/app/covid-19-qppza/service/REST-API/incoming_webhook/countries_summary'
    };
    

    /**Type of query.
     * * Used to index into endpoints object.
     */
    static queryType = {
        US_ONLY : 'usOnly',
        GLOBAL : 'global',
        METADATA : 'metadata',
        SUMMARY : 'countriesSummary'
    };
    
    /**
     *  Default options for a general query. The options object will be used to build any query to the John Hopkins API. 
     * The properties are used as parms in the GET request for the API endpoint. 
     * Default hidden fields. These are fields in the database that  
     * we just don't need, so we pass that along to the api and they 
     * get pruned from the result before sending back to us. 
     * @returns object: 
     * @property queryType : JohnsHopkinsRequest.queryType.US_ONLY (0)
     * @property uid : 16
     * @property state : 'wa'
     * @property county : 'king'
     * @property country : 'USA' 
     * @property minDate : today 
     * @property maxDate : today (if the min and maxDate are the same, we get the data for that one day)
     * @property hideFields : JohnsHopkinsRequest.#hideFields ('_id, uid combined_name, fips')
     * TODO figure out what the uid being set to 16 does. Why is it set like that in the documentation? 
     */
    static defaultOptions (){
        /** because we're using Object.assign method to combine user 
         * options with defaults, we use a method that returns an object
         * rather than just defining a static object, as the defaults 
         * would be overridden every time we call assign.*/
        return {
            queryType: 'usOnly',    
            country: 'USA', minDate: new Date(), 
            maxDate: new Date(), 
            hideFields: '_id, date, country, combined_name, fips, uid'
        };
    }

    
    /**
     * 
     * @param {object} options Options object. See defaultOptions
     * @returns {object} returns an object : {host, route, query}
     */
    static getRequesttParams(options) {
        Object.assign(this.defaultOptions(), options); 
        return  {host : this.host, route : this.routes[options.queryType], query : this.#getQuery(options)};
    }

    static #getQuery(options){
        const res = {};
        for(let opt in options){
            if(opt == 'state' || opt == 'county' ){
                res[opt] = options[opt];
            }
            else if(opt == 'minDate'){
                res.min_date = options[opt];
            }
            else if(opt == 'maxDate'){
                res.max_date = options[opt];
            }
            else if(opt == 'hideFields'){
                res.hide_fileds = options[opt];
            }
        }//close for 
        return res;
    }// close #getQuery 

}//close class 